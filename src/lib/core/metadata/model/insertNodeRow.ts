import { NodeRow } from "../../../../types/NodeRow";
import { Guid } from "../../guid/Guid";

type OverwriteFields = Pick<NodeRow, "id">;

/**
 * Insert node as last item of provided parent.
 * @param state Current state.
 * @param parentNodeId Id of parent node.
 * @param properties Properties to add.
 * @param overwrite Overwrites autogenerated properties.
 * @returns Immutable new state after adding new node.
 */
export const insertNodeRow = <T>(
  state: Array<NodeRow<T>>,
  parentNodeId: string,
  properties: T,
  overwrite?: OverwriteFields
) => {
  const newState = structuredClone(state);
  const parentNode = newState.find((item) => item.id === parentNodeId);

  if (parentNode === undefined) {
    throw new Error(`Cannot insert. ParentId ${parentNodeId} does not exist.`);
  }

  const id = overwrite?.id;
  const childrenOfParent = newState.filter((item) => item.parentNodeId === parentNodeId).length;
  const newRowNodeId = Guid.new();
  const newId = id ?? newRowNodeId;

  newState.push({
    id: newId,
    parentNodeId: parentNodeId,
    childrenNodeIds: [],
    order: childrenOfParent,
    properties: properties,
    computedProperties: {} as T,
  });

  /**
   * Finally we need to update parent with `childrenNodeIds`.
   */
  parentNode.childrenNodeIds.push(newId);

  return newState;
};
